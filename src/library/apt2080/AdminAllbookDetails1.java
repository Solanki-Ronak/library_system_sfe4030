/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package library.apt2080;

import java.awt.Component;
import java.awt.Image;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.*;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author ronak
 */
public class AdminAllbookDetails1 extends javax.swing.JFrame {

    /**
     * Creates new form AdminAllbookDetails
     */
    private int selectedRow;
    private String selectedImagePath;
    String filename=null;
    byte[] person_image=null;
    public AdminAllbookDetails1() {
        initComponents();
        displayAllBooks();
        customizeComponents();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtbookname = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookTable = new javax.swing.JTable();
        searchcoursecodebutton = new javax.swing.JButton();
        displaybutton = new javax.swing.JButton();
        searchbooknamebutton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        bookid1 = new javax.swing.JTextField();
        bookname1 = new javax.swing.JTextField();
        coursecode1 = new javax.swing.JTextField();
        author1 = new javax.swing.JTextField();
        availability1 = new javax.swing.JTextField();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        picturebutton = new javax.swing.JButton();
        pictobeshown = new javax.swing.JLabel();
        txtcoursecode = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();

        jLabel4.setText("jLabel4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1000, 640));
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("ALL BOOK DETAILS");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(290, 0, 340, 60);

        jLabel2.setText("SEARCH A BOOK BY:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(40, 40, 180, 16);

        jLabel3.setText("COURSE CODE:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(40, 70, 120, 16);

        jLabel5.setText("BOOK NAME:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(40, 120, 100, 16);
        getContentPane().add(txtbookname);
        txtbookname.setBounds(160, 120, 90, 30);

        bookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "BOOK ID", "BOOK NAME", "COURSE CODE", "AUTHOR", "AVAILABILITY", "IMAGE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Byte.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        bookTable.setRowHeight(120);
        bookTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(bookTable);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 270, 813, 270);

        searchcoursecodebutton.setIcon(new javax.swing.ImageIcon("C:\\Users\\ronak\\OneDrive\\Desktop\\2.3\\APT2080\\images\\search (2) (1).png")); // NOI18N
        searchcoursecodebutton.setText("SEARCH");
        searchcoursecodebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchcoursecodebuttonActionPerformed(evt);
            }
        });
        getContentPane().add(searchcoursecodebutton);
        searchcoursecodebutton.setBounds(280, 70, 130, 30);

        displaybutton.setIcon(new javax.swing.ImageIcon("C:\\Users\\ronak\\OneDrive\\Desktop\\2.3\\APT2080\\images\\display (2).png")); // NOI18N
        displaybutton.setText("DISPLAY ALL BOOKS");
        displaybutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displaybuttonActionPerformed(evt);
            }
        });
        getContentPane().add(displaybutton);
        displaybutton.setBounds(70, 170, 220, 23);

        searchbooknamebutton.setIcon(new javax.swing.ImageIcon("C:\\Users\\ronak\\OneDrive\\Desktop\\2.3\\APT2080\\images\\search (2) (1).png")); // NOI18N
        searchbooknamebutton.setText("SEARCH");
        searchbooknamebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbooknamebuttonActionPerformed(evt);
            }
        });
        getContentPane().add(searchbooknamebutton);
        searchbooknamebutton.setBounds(280, 120, 130, 30);

        jLabel6.setText("OR");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(130, 100, 70, 16);

        jButton1.setIcon(new javax.swing.ImageIcon("C:\\Users\\ronak\\OneDrive\\Desktop\\2.3\\APT2080\\images\\3545435 (2).png")); // NOI18N
        jButton1.setText("BACK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(840, 530, 90, 23);

        jLabel7.setText("BOOK ID:");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(620, 50, 70, 16);

        jLabel8.setText("BOOK NAME:");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(620, 100, 90, 16);

        jLabel9.setText("COURSE CODE:");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(620, 140, 100, 16);

        jLabel10.setText("AUTHOR");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(630, 180, 80, 16);

        jLabel11.setText("AVAILABILITY");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(620, 220, 90, 16);
        getContentPane().add(bookid1);
        bookid1.setBounds(711, 42, 80, 30);
        getContentPane().add(bookname1);
        bookname1.setBounds(710, 90, 80, 30);
        getContentPane().add(coursecode1);
        coursecode1.setBounds(711, 130, 80, 30);
        getContentPane().add(author1);
        author1.setBounds(711, 170, 80, 30);
        getContentPane().add(availability1);
        availability1.setBounds(711, 210, 80, 30);

        update.setIcon(new javax.swing.ImageIcon("C:\\Users\\ronak\\OneDrive\\Desktop\\2.3\\APT2080\\images\\112 (3).png")); // NOI18N
        update.setText("UPDATE");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        getContentPane().add(update);
        update.setBounds(810, 90, 160, 50);

        delete.setIcon(new javax.swing.ImageIcon("C:\\Users\\ronak\\OneDrive\\Desktop\\2.3\\APT2080\\images\\delete (1).png")); // NOI18N
        delete.setText("DELETE");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        getContentPane().add(delete);
        delete.setBounds(810, 160, 160, 50);

        picturebutton.setText("CHANGE PICTURE");
        picturebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                picturebuttonActionPerformed(evt);
            }
        });
        getContentPane().add(picturebutton);
        picturebutton.setBounds(810, 50, 160, 23);
        getContentPane().add(pictobeshown);
        pictobeshown.setBounds(830, 290, 147, 138);
        getContentPane().add(txtcoursecode);
        txtcoursecode.setBounds(160, 70, 90, 30);

        jLabel12.setIcon(new javax.swing.ImageIcon("C:\\Users\\ronak\\OneDrive\\Desktop\\2.3\\APT2080\\images\\background (1).jpg")); // NOI18N
        jLabel12.setText("jLabel12");
        jLabel12.setPreferredSize(new java.awt.Dimension(1000, 640));
        getContentPane().add(jLabel12);
        jLabel12.setBounds(0, 0, 1190, 640);

        pack();
    }// </editor-fold>//GEN-END:initComponents
public class ImageTableCellRenderer extends DefaultTableCellRenderer {
    @Override
     public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        Component cellComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        if (value instanceof ImageIcon) {
            ImageIcon imageIcon = (ImageIcon) value;
            setIcon(imageIcon);
            setText("");  // Set the text to an empty string for ImageIcon values
        } else {
            setIcon(null);
        }
        return cellComponent;
    }
}
private void customizeComponents() {
        searchcoursecodebutton.setBackground(java.awt.Color.WHITE);
        searchbooknamebutton.setBackground(java.awt.Color.WHITE);
        jButton1.setBackground(java.awt.Color.WHITE);
        update.setBackground(java.awt.Color.WHITE);
        delete.setBackground(java.awt.Color.WHITE);
        displaybutton.setBackground(java.awt.Color.WHITE);
        picturebutton.setBackground(java.awt.Color.WHITE);
    }
    


    private void searchcoursecodebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchcoursecodebuttonActionPerformed
        String courseCode = (String) txtcoursecode.getText();
    DefaultTableModel model = (DefaultTableModel) bookTable.getModel();
    model.setRowCount(0);

    try {
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "");
        String query = "SELECT * FROM addbook WHERE coursecode = ?";
        PreparedStatement statement = conn.prepareStatement(query);
        statement.setString(1, courseCode);
        ResultSet rs = statement.executeQuery();

        while (rs.next()) {
            String bookID = rs.getString("bookid");
            String bookName = rs.getString("bookname");
            String author = rs.getString("author");
            String availability = rs.getString("available");
            byte[] imageData = rs.getBytes("imageupload");

            ImageIcon imageIcon = new ImageIcon(imageData);
            Image image = imageIcon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
            ImageIcon scaledImageIcon = new ImageIcon(image);

            model.addRow(new Object[]{bookID, bookName, courseCode, author, availability, scaledImageIcon});
        }

        rs.close();
        statement.close();
        conn.close();
    } catch (SQLException ex) {
        Logger.getLogger(AdminAllbookDetails1.class.getName()).log(Level.SEVERE, null, ex);
    }
    txtcoursecode.setText("");
    bookTable.getColumnModel().getColumn(5).setCellRenderer(new ImageTableCellRenderer());

    }//GEN-LAST:event_searchcoursecodebuttonActionPerformed


    private void displaybuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displaybuttonActionPerformed
   displayAllBooks();
        
    }//GEN-LAST:event_displaybuttonActionPerformed


    private void searchbooknamebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchbooknamebuttonActionPerformed
 String bookName = txtbookname.getText();
    DefaultTableModel model = (DefaultTableModel) bookTable.getModel();
    model.setRowCount(0);

    try {
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "");
        String query = "SELECT * FROM addbook WHERE bookname LIKE ?";
        PreparedStatement statement = conn.prepareStatement(query);
        statement.setString(1, "%" + bookName + "%");
        ResultSet rs = statement.executeQuery();

        while (rs.next()) {
            String bookID = rs.getString("bookid");
            String courseCode = rs.getString("coursecode");
            String author = rs.getString("author");
            String availability = rs.getString("available");
            byte[] imageData = rs.getBytes("imageupload");

            ImageIcon imageIcon = new ImageIcon(imageData);
            Image image = imageIcon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
            ImageIcon scaledImageIcon = new ImageIcon(image);

            model.addRow(new Object[]{bookID, bookName, courseCode, author, availability, scaledImageIcon});
        }

        rs.close();
        statement.close();
        conn.close();
    } catch (SQLException ex) {
        Logger.getLogger(AdminAllbookDetails1.class.getName()).log(Level.SEVERE, null, ex);
    }

    txtbookname.setText("");
    bookTable.getColumnModel().getColumn(5).setCellRenderer(new ImageTableCellRenderer());

    }//GEN-LAST:event_searchbooknamebuttonActionPerformed

    private void bookTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookTableMouseClicked
        // TODO add your handling code here:
      int selectedRowIndex = bookTable.getSelectedRow();
        if (selectedRowIndex >= 0) {
            DefaultTableModel model = (DefaultTableModel) bookTable.getModel();
            bookid1.setText(model.getValueAt(selectedRowIndex, 0).toString());
            bookname1.setText(model.getValueAt(selectedRowIndex, 1).toString());
            coursecode1.setText(model.getValueAt(selectedRowIndex, 2).toString());
            author1.setText(model.getValueAt(selectedRowIndex, 3).toString());
            availability1.setText(model.getValueAt(selectedRowIndex, 4).toString());

            ImageIcon imageIcon = (ImageIcon) model.getValueAt(selectedRowIndex, 5);
            Image image = imageIcon.getImage().getScaledInstance(pictobeshown.getWidth(), pictobeshown.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon scaledImageIcon = new ImageIcon(image);
            pictobeshown.setIcon(scaledImageIcon);}
   
    }//GEN-LAST:event_bookTableMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         Adminfirstpage adminfirstpage=new Adminfirstpage();
        adminfirstpage.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed
private void updateReturnedNewTable(String bookID, String bookName, String courseCode, String author) {
        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "");
            String query = "UPDATE returnednew SET bookname = ?, coursecode = ?, author = ?, imageupload = ? WHERE bookid = ?";
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, bookName);
            statement.setString(2, courseCode);
            statement.setString(3, author);
            statement.setBytes(4, person_image);
            statement.setString(5, bookID);
            statement.executeUpdate();
            statement.close();
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(AdminAllbookDetails1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }



    private void deleteReturnedNewRecord(String bookID) {
        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "");
            String query = "DELETE FROM returnednew WHERE bookid = ?";
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, bookID);
            statement.executeUpdate();
            statement.close();
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(AdminAllbookDetails1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

   private void updateUnreservedTable(String bookID, String bookName, String courseCode, String author, String availability1, byte[] image) {
    try {
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "");

        // Fetch the original availability from the addbook table
        String originalAvailabilityQuery = "SELECT available FROM difference WHERE bookid = ?";
        PreparedStatement originalAvailabilityStatement = conn.prepareStatement(originalAvailabilityQuery);
        originalAvailabilityStatement.setString(1, bookID);
        ResultSet originalAvailabilityRs = originalAvailabilityStatement.executeQuery();

        if (originalAvailabilityRs.next()) {
            int originalAvailability = originalAvailabilityRs.getInt("available");
            int newAvailability = Integer.parseInt(availability1);
            int difference = newAvailability - originalAvailability;

            // Update the unreserved table with the difference in availability
            String unreservedQuery = "UPDATE unreserved SET bookname = ?, coursecode = ?, author = ?, available = available + ?, imageupload = ? WHERE bookid = ?";
            PreparedStatement unreservedStatement = conn.prepareStatement(unreservedQuery);
            unreservedStatement.setString(1, bookName);
            unreservedStatement.setString(2, courseCode);
            unreservedStatement.setString(3, author);
            unreservedStatement.setInt(4, difference);
            unreservedStatement.setBytes(5, image);
            unreservedStatement.setString(6, bookID);
            unreservedStatement.executeUpdate();
            unreservedStatement.close();
        }

        originalAvailabilityRs.close();
        originalAvailabilityStatement.close();
        conn.close();
    } catch (SQLException ex) {
        Logger.getLogger(AdminAllbookDetails1.class.getName()).log(Level.SEVERE, null, ex);
    }
}



    private void deleteUnreservedRecord(String bookID) {
        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "");
            String query = "DELETE FROM unreserved WHERE bookid = ?";
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, bookID);
            statement.executeUpdate();
            statement.close();
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(AdminAllbookDetails1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        String bookID = bookid1.getText();
    String bookName = bookname1.getText();
    String courseCode = coursecode1.getText();
    String author = author1.getText();
    String availability = availability1.getText();

    int response = JOptionPane.showConfirmDialog(this, "Do you want to update this book?", "Confirm",
            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
    if (response == JOptionPane.YES_OPTION) {
        try {
            if (person_image == null) {
                Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "");
                String query = "SELECT imageupload FROM addbook WHERE bookid = ?";
                PreparedStatement statement = conn.prepareStatement(query);
                statement.setString(1, bookID);
                ResultSet rs = statement.executeQuery();

                if (rs.next()) {
                    person_image = rs.getBytes("imageupload");
                }

                rs.close();
                statement.close();
                conn.close();
            }

            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "");
            String query = "UPDATE addbook SET bookname = ?, coursecode = ?, author = ?, available = ?, imageupload = ? WHERE bookid = ?";
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, bookName);
            statement.setString(2, courseCode);
            statement.setString(3, author);
            statement.setString(4, availability);
            statement.setBytes(5, person_image);
            statement.setString(6, bookID);
            int rowsUpdated = statement.executeUpdate();

            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Book updated successfully!");
                updateReturnedNewTable(bookID, bookName, courseCode, author);
                updateUnreservedTable(bookID, bookName, courseCode, author, availability, person_image);
                clearFields();
                displayAllBooks();
                pictobeshown.setIcon(null);
            } else {
                JOptionPane.showMessageDialog(this, "Failed to update book.", "Error", JOptionPane.ERROR_MESSAGE);
            }

            statement.close();
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(AdminAllbookDetails1.class.getName()).log(Level.SEVERE, null, ex);
    JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_updateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
      String bookID = bookid1.getText();

        int response = JOptionPane.showConfirmDialog(this, "Do you want to delete this book?", "Confirm",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response == JOptionPane.YES_OPTION) {
            try {
                Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "");
                String query = "DELETE FROM addbook WHERE bookid = ?";
                PreparedStatement statement = conn.prepareStatement(query);
                statement.setString(1, bookID);
                
                
                
                
                // Delete from the "difference" table
            String deleteDifferenceQuery = "DELETE FROM difference WHERE bookid = ?";
            PreparedStatement deleteDifferenceStatement = conn.prepareStatement(deleteDifferenceQuery);
            deleteDifferenceStatement.setString(1, bookID);
            deleteDifferenceStatement.executeUpdate();
            int rowsDeleted = statement.executeUpdate();

                if (rowsDeleted > 0) {
                    JOptionPane.showMessageDialog(this, "Book deleted successfully!");
                    deleteReturnedNewRecord(bookID);
                    deleteUnreservedRecord(bookID);
                    clearFields();
                    displayAllBooks();
                    pictobeshown.setIcon(null);
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to delete book.", "Error", JOptionPane.ERROR_MESSAGE);
                }

                statement.close();
                conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(AdminAllbookDetails1.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void picturebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_picturebuttonActionPerformed
        // TODO add your handling code here:
         JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        filename = f.getAbsolutePath();
        ImageIcon imageIcon = new ImageIcon(new ImageIcon(filename).getImage().getScaledInstance(pictobeshown.getWidth(), pictobeshown.getHeight(), Image.SCALE_SMOOTH));
        pictobeshown.setIcon(imageIcon);
        try {
            File image = new File(filename);
            FileInputStream fis = new FileInputStream(image);
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            byte[] buf = new byte[1024];
            for (int readNum; (readNum = fis.read(buf)) != -1;) {
                bos.write(buf, 0, readNum);
            }
            person_image = bos.toByteArray();
        } catch (IOException ex) {
            Logger.getLogger(AdminAllbookDetails1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_picturebuttonActionPerformed
private void displayAllBooks() {
        DefaultTableModel model = (DefaultTableModel) bookTable.getModel();
    model.setRowCount(0);

    try {
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "");
        String query = "SELECT * FROM addbook";
        PreparedStatement statement = conn.prepareStatement(query);
        ResultSet rs = statement.executeQuery();

        while (rs.next()) {
            String bookID = rs.getString("bookid");
            String bookName = rs.getString("bookname");
            String courseCode = rs.getString("coursecode");
            String author = rs.getString("author");
            String availability = rs.getString("available");
            byte[] imageData = rs.getBytes("imageupload");

            ImageIcon imageIcon = new ImageIcon(imageData);
            Image image = imageIcon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
            ImageIcon scaledImageIcon = new ImageIcon(image);

            model.addRow(new Object[]{bookID, bookName, courseCode, author, availability, scaledImageIcon});
        }

        rs.close();
        statement.close();
        conn.close();
    } catch (SQLException ex) {
        Logger.getLogger(AdminAllbookDetails1.class.getName()).log(Level.SEVERE, null, ex);
    }

    selectedImagePath = null; // Reset the selected image path
    txtbookname.setText("");
    bookTable.getColumnModel().getColumn(5).setCellRenderer(new ImageTableCellRenderer());
    }

    private void clearFields() {
        bookid1.setText("");
        bookname1.setText("");
        coursecode1.setText("");
        author1.setText("");
        availability1.setText("");
        pictobeshown.setText("");
    }

public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminAllbookDetails1().setVisible(true);
            }
        });
    }

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField author1;
    private javax.swing.JTextField availability1;
    private javax.swing.JTable bookTable;
    private javax.swing.JTextField bookid1;
    private javax.swing.JTextField bookname1;
    private javax.swing.JTextField coursecode1;
    private javax.swing.JButton delete;
    private javax.swing.JButton displaybutton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel pictobeshown;
    private javax.swing.JButton picturebutton;
    private javax.swing.JButton searchbooknamebutton;
    private javax.swing.JButton searchcoursecodebutton;
    private javax.swing.JTextField txtbookname;
    private javax.swing.JTextField txtcoursecode;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
