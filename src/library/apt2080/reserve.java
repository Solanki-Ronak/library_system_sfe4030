/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package library.apt2080;


import java.awt.Component;
import java.awt.Image;
import java.sql.*;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.sql.Date;
import com.toedter.calendar.JDateChooser;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;





/**
 *
 * @author ronak
 */
public class reserve extends javax.swing.JFrame {

    /**
     * Creates new form AdminAllbookDetails
     */
   
    private int selectedRow;
    private String selectedImagePath;
    String filename=null;
    byte[] person_image=null;
    private Date selectedDate1;
private Date selectedDate2;
    public reserve() {
        initComponents();
        addTableSelectionListener();
        displayAllIssuedBooks();
         
       
     customizeComponents();
    }
    
     public javax.swing.JTable getBookTable() {
        return bookTable;
    }

    public javax.swing.JTextField getNewstudentid() {
        return newstudentid;
    }

    public javax.swing.JTextField getNewbookid() {
        return newbookid;
    }

    public com.toedter.calendar.JDateChooser getDate1() {
        return date1;
    }

    public com.toedter.calendar.JDateChooser getDate2() {
        return date2;
    }

private void customizeComponents() {
        
        jButton1.setBackground(java.awt.Color.WHITE);
         returnb.setBackground(java.awt.Color.WHITE);
          
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        newstudentid = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        newbookid = new javax.swing.JTextField();
        returnb = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        date1 = new com.toedter.calendar.JDateChooser();
        date2 = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();

        jLabel4.setText("jLabel4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1000, 600));
        getContentPane().setLayout(null);

        bookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "BOOK ID", "BOOK NAME", "COURSE CODE", "AUTHOR", "IMAGE", "STUDENT ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Byte.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        bookTable.setRowHeight(120);
        bookTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(bookTable);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(20, 90, 813, 315);

        jButton1.setIcon(new javax.swing.ImageIcon("C:\\Users\\ronak\\OneDrive\\Desktop\\2.3\\APT2080\\images\\3545435 (2).png")); // NOI18N
        jButton1.setText("BACK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(842, 500, 110, 23);

        jLabel2.setText("STUDENT ID:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(20, 440, 110, 40);
        getContentPane().add(newstudentid);
        newstudentid.setBounds(130, 450, 100, 22);

        jLabel3.setText("BOOK ID:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(20, 490, 80, 30);
        getContentPane().add(newbookid);
        newbookid.setBounds(130, 500, 100, 22);

        returnb.setIcon(new javax.swing.ImageIcon("C:\\Users\\ronak\\OneDrive\\Desktop\\2.3\\APT2080\\images\\issuebook (1).png")); // NOI18N
        returnb.setText("ISSUE");
        returnb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnbActionPerformed(evt);
            }
        });
        getContentPane().add(returnb);
        returnb.setBounds(600, 450, 170, 60);

        jLabel6.setText("DATE OF ISSUE:");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(270, 440, 140, 40);

        jLabel7.setText("RETURN BEFORE:");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(270, 500, 140, 30);

        jLabel8.setFont(new java.awt.Font("Rockwell Nova Light", 0, 24)); // NOI18N
        jLabel8.setText("ISSUE A RESERVED BOOK");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(310, 10, 350, 50);
        getContentPane().add(date1);
        date1.setBounds(400, 450, 85, 22);
        getContentPane().add(date2);
        date2.setBounds(400, 500, 85, 22);

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\ronak\\OneDrive\\Desktop\\2.3\\APT2080\\images\\background (1).jpg")); // NOI18N
        jLabel1.setText("jLabel1");
        jLabel1.setPreferredSize(new java.awt.Dimension(1000, 600));
        getContentPane().add(jLabel1);
        jLabel1.setBounds(-3, -4, 1110, 580);

        pack();
    }// </editor-fold>//GEN-END:initComponents
public class ImageTableCellRenderer extends DefaultTableCellRenderer {
    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        Component cellComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        if (value instanceof ImageIcon) {
            ImageIcon imageIcon = (ImageIcon) value;
            setIcon(imageIcon);
            setText(""); // Set the text to an empty string for ImageIcon values
        } else {
            setIcon(null);
            setText(value != null ? value.toString() : ""); // Set the text to the value's string representation
        }
        return cellComponent;
    }
}



private void displayAllIssuedBooks() {
         DefaultTableModel model = (DefaultTableModel) bookTable.getModel();
    model.setRowCount(0);

    try {
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "");
        String query = "SELECT * FROM reserved ";
        PreparedStatement statement = conn.prepareStatement(query);
        ResultSet rs = statement.executeQuery();

        while (rs.next()) {
            String bookID = rs.getString("bookid");
            String bookName = rs.getString("bookname");
            String courseCode = rs.getString("coursecode");
            String author = rs.getString("author");
            byte[] imageData = rs.getBytes("imageupload");
            String studentID = rs.getString("studentid");
           

            ImageIcon imageIcon = new ImageIcon(imageData);
            Image image = imageIcon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
            ImageIcon scaledImageIcon = new ImageIcon(image);

            model.addRow(new Object[]{bookID, bookName, courseCode, author, scaledImageIcon, studentID});
        }

        rs.close();
        statement.close();
        conn.close();
    } catch (SQLException ex) {
        Logger.getLogger(reserve.class.getName()).log(Level.SEVERE, null, ex);
    }

    selectedImagePath = null; // Reset the selected image path
    bookTable.getColumnModel().getColumn(4).setCellRenderer(new ImageTableCellRenderer());

    
}

private void addTableSelectionListener() {
    bookTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
        public void valueChanged(ListSelectionEvent event) {
            if (!event.getValueIsAdjusting()) {
                int selectedRow = bookTable.getSelectedRow();
                if (selectedRow != -1) {
                    String selectedStudentID = (String) bookTable.getValueAt(selectedRow, 5);
                    String selectedBookID = (String) bookTable.getValueAt(selectedRow, 0);
                    String selectedCourseCode = (String) bookTable.getValueAt(selectedRow, 2);
                    String selectedAuthor = (String) bookTable.getValueAt(selectedRow, 3);

                    newstudentid.setText(selectedStudentID);
                    newbookid.setText(selectedBookID);
                    
                }
            }
        }
    });
}

    private void bookTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookTableMouseClicked
        // TODO add your handling code here:
   
    }//GEN-LAST:event_bookTableMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         IssueBook adminfirstpage=new IssueBook();
        adminfirstpage.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void returnbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnbActionPerformed
       String studentID = newstudentid.getText();
    String bookID = newbookid.getText();

    // Get the selected dates from the date choosers
    java.sql.Date selectedDate1 = new java.sql.Date(date1.getDate().getTime());
    java.sql.Date selectedDate2 = new java.sql.Date(date1.getDate().getTime());

    try {
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "");

        // Check if there are any books in the returnednew table
        String checkNewQuery = "SELECT * FROM returnednew LIMIT 1";
        PreparedStatement checkNewStatement = conn.prepareStatement(checkNewQuery);
        ResultSet checkNewResult = checkNewStatement.executeQuery();

        if (checkNewResult.next()) {
            // If a book is found in the returnednew table, issue it and delete the first row from returnednew

            // Get the details of the book from the returnednew table
            String bookIDFromReturnedNew = checkNewResult.getString("bookid");
            String bookName = checkNewResult.getString("bookname");
            String courseCode = checkNewResult.getString("coursecode");
            String author = checkNewResult.getString("author");
            byte[] imageUpload = checkNewResult.getBytes("imageupload");
            int sdn = checkNewResult.getInt("sdn");

            // Insert the book into the issued table
            String insertQuery = "INSERT INTO issued (bookid, bookname, coursecode, author, imageupload, studentid, sdn, issuedate, returndate) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
            PreparedStatement insertStatement = conn.prepareStatement(insertQuery);
            insertStatement.setString(1, bookIDFromReturnedNew);
            insertStatement.setString(2, bookName);
            insertStatement.setString(3, courseCode);
            insertStatement.setString(4, author);
            insertStatement.setBytes(5, imageUpload);
            insertStatement.setString(6, studentID);
            insertStatement.setInt(7, sdn);
            insertStatement.setDate(8, selectedDate1);
            insertStatement.setDate(9, selectedDate2);
            insertStatement.executeUpdate();
            insertStatement.close();

            // Delete the first row from the returnednew table
            String deleteReturnedNewQuery = "DELETE FROM returnednew LIMIT 1";
            PreparedStatement deleteReturnedNewStatement = conn.prepareStatement(deleteReturnedNewQuery);
            deleteReturnedNewStatement.executeUpdate();
            deleteReturnedNewStatement.close();

            // Delete the book from the reserved table
            String deleteReservedQuery = "DELETE FROM reserved WHERE studentid = ? AND bookid = ?";
            PreparedStatement deleteReservedStatement = conn.prepareStatement(deleteReservedQuery);
            deleteReservedStatement.setString(1, studentID);
            deleteReservedStatement.setString(2, bookIDFromReturnedNew);
            deleteReservedStatement.executeUpdate();
            deleteReservedStatement.close();

            JOptionPane.showMessageDialog(this, "Book issued successfully!");
            displayAllIssuedBooks(); // Refresh the table
        } else {
            // Retrieve available value from addbook table for the entered book ID
            String getXQuery = "SELECT available FROM addbook WHERE bookid = ?";
            PreparedStatement getXStatement = conn.prepareStatement(getXQuery);
            getXStatement.setString(1, bookID);
            ResultSet getXResult = getXStatement.executeQuery();
            int available = 0;
            if (getXResult.next()) {
                available = getXResult.getInt("available");
            }
            getXResult.close();
            getXStatement.close();

            if (available == 0) {
                // Display error message if book is not available
                JOptionPane.showMessageDialog(this, "There are no books available to be issued.");
            } else {
                // Retrieve available value from unreserved table for the entered book ID
                String getYQuery = "SELECT available FROM unreserved WHERE bookid = ?";
                PreparedStatement getYStatement = conn.prepareStatement(getYQuery);
                getYStatement.setString(1, bookID);
                ResultSet getYResult = getYStatement.executeQuery();
                int available1 = 0;
                if (getYResult.next()) {
                    available1 = getYResult.getInt("available");
                }
                getYResult.close();
                getYStatement.close();

                // Calculate sdn
                int sdn = (available - available1) + 2;

                // Insert the issued book into the issued table
                String insertQuery = "INSERT INTO issued (bookid, bookname, coursecode, author, imageupload, studentid, sdn, issuedate, returndate) SELECT bookid, bookname, coursecode, author, imageupload, ?, ?, ?, ? FROM unreserved WHERE bookid = ?";
                PreparedStatement insertStatement = conn.prepareStatement(insertQuery);
                insertStatement.setString(1, studentID);
                insertStatement.setInt(2, sdn);
                insertStatement.setDate(3, selectedDate1);
                insertStatement.setDate(4, selectedDate2);
                insertStatement.setString(5, bookID);
                int rowsAffected = insertStatement.executeUpdate();
                insertStatement.close();

                if (rowsAffected > 0) {
                    // Update the available column in the unreserved table
                    String updateQuery = "UPDATE unreserved SET available = available - 1 WHERE bookid = ?";
                    PreparedStatement updateStatement = conn.prepareStatement(updateQuery);
                    updateStatement.setString(1, bookID);
                    updateStatement.executeUpdate();
                    updateStatement.close();
                    
                    
                    String deleteReservedQuery = "DELETE FROM reserved WHERE studentid = ? AND bookid = ?";
            PreparedStatement deleteReservedStatement = conn.prepareStatement(deleteReservedQuery);
            deleteReservedStatement.setString(1, studentID);
            deleteReservedStatement.setString(2, bookID);
            deleteReservedStatement.executeUpdate();
            deleteReservedStatement.close();

                    JOptionPane.showMessageDialog(this, "Book issued successfully!");
                    displayAllIssuedBooks(); // Refresh the table
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to issue the book. Please check the student ID, book ID, and SDN.");
                }
            }
        }

        checkNewResult.close();
        checkNewStatement.close();
        conn.close();
    } catch (SQLException ex) {
        Logger.getLogger(reserve.class.getName()).log(Level.SEVERE, null, ex);
    }

    newstudentid.setText("");
    newbookid.setText("");
    
    date1.setDate(null);
    date1.setDate(null);
    }//GEN-LAST:event_returnbActionPerformed

public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new reserve().setVisible(true);
            }
        });
    }

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable bookTable;
    private com.toedter.calendar.JDateChooser date1;
    private com.toedter.calendar.JDateChooser date2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField newbookid;
    private javax.swing.JTextField newstudentid;
    private javax.swing.JButton returnb;
    // End of variables declaration//GEN-END:variables
}
